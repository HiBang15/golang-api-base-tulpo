// Code generated by sqlc. DO NOT EDIT.
// source: permission_activity.sql

package database

import (
	"context"
)

const createPermissionActivity = `-- name: CreatePermissionActivity :one
INSERT INTO permission_activity (
    permission_id, activity_id
) VALUES (
    $1, $2
)
RETURNING permission_id, activity_id, created_at, deleted_at, updated_at
`

type CreatePermissionActivityParams struct {
	PermissionID int32 `json:"permission_id"`
	ActivityID   int32 `json:"activity_id"`
}

func (q *Queries) CreatePermissionActivity(ctx context.Context, arg CreatePermissionActivityParams) (PermissionActivity, error) {
	row := q.db.QueryRowContext(ctx, createPermissionActivity, arg.PermissionID, arg.ActivityID)
	var i PermissionActivity
	err := row.Scan(
		&i.PermissionID,
		&i.ActivityID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePermissionActivity = `-- name: DeletePermissionActivity :exec
UPDATE permission_activity
SET deleted_at = now()
WHERE permission_id = $1
`

func (q *Queries) DeletePermissionActivity(ctx context.Context, permissionID int32) error {
	_, err := q.db.ExecContext(ctx, deletePermissionActivity, permissionID)
	return err
}

const getPermissionActivityByPermissionId = `-- name: GetPermissionActivityByPermissionId :many
SELECT permission_id, activity_id, created_at, deleted_at, updated_at FROM permission_activity WHERE permission_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetPermissionActivityByPermissionId(ctx context.Context, permissionID int32) ([]PermissionActivity, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionActivityByPermissionId, permissionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PermissionActivity
	for rows.Next() {
		var i PermissionActivity
		if err := rows.Scan(
			&i.PermissionID,
			&i.ActivityID,
			&i.CreatedAt,
			&i.DeletedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePermissionActivity = `-- name: UpdatePermissionActivity :one
UPDATE permission_activity
SET activity_id = $2
WHERE permission_id = $1
    RETURNING permission_id, activity_id, created_at, deleted_at, updated_at
`

type UpdatePermissionActivityParams struct {
	PermissionID int32 `json:"permission_id"`
	ActivityID   int32 `json:"activity_id"`
}

func (q *Queries) UpdatePermissionActivity(ctx context.Context, arg UpdatePermissionActivityParams) (PermissionActivity, error) {
	row := q.db.QueryRowContext(ctx, updatePermissionActivity, arg.PermissionID, arg.ActivityID)
	var i PermissionActivity
	err := row.Scan(
		&i.PermissionID,
		&i.ActivityID,
		&i.CreatedAt,
		&i.DeletedAt,
		&i.UpdatedAt,
	)
	return i, err
}
